# Generated by Django 5.0.7 on 2024-11-14 12:53

import accounts.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('email', models.EmailField(error_messages={'unique': 'Um usuário com este email já existe.'}, max_length=254, unique=True, verbose_name='email address')),
                ('email_verified', models.BooleanField(default=False, help_text='Indica se o email do usuário foi verificado.', verbose_name='email verificado')),
                ('activation_token', models.UUIDField(default=accounts.models.generate_activation_token, editable=False, help_text='Token usado para verificação de email.', verbose_name='token de ativação')),
                ('activation_token_expiry', models.DateTimeField(blank=True, help_text='Data de expiração do token de ativação.', null=True, verbose_name='data de expiração do token')),
                ('is_teacher', models.BooleanField(default=True, help_text='Indica se o usuário é um professor.', verbose_name='é professor')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='data de cadastro')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='último login')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'usuário',
                'verbose_name_plural': 'usuários',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
